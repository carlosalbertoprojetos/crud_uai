"""
Django settings for crud_uai project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0fuuixjs69-90t4sx%is7y!m@!!zcv(())9pt^6m=glzvjyy@2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # django allauth
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # login com google/Facebook
    # 'allauth.socialaccount.providers.google',

    # django-crispy-forms
    'crispy_forms',

    # cpf / cnpj'


    #apps criados
    'usuario',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crud_uai.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crud_uai.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(os.path.join(BASE_DIR / 'db.sqlite3')),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles', 'static')

STATICFILES_DIRS = [
    'statics'
]

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# django-allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },

}

# Autenticar por meio do User criado
AUTH_USER_MODEL = 'usuario.User'

# Faz com que o usuário, ao se cadastrar, receba um email de confirmação
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Opção de Lembrar dados de cadastro para login
ACCOUNT_SESSION_REMEMBER = True

# # Desativa campo username do User AbstractBaseUser
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USERNAME_REQUIRED = False

# Indica ser o email o campo de usuário
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'
# Método de autenticação: email
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_AUTHENTICATION_METHOD =  ("email" | "cpf" | "name")
# Email obrigatório
ACCOUNT_EMAIL_REQUIRED = True
# Email único
ACCOUNT_UNIQUE_EMAIL = True

# Confirmação de cadastro por email / loga somente após esta confirmação
ACCOUNT_EMAIL_VERIFICATION='mandatory'

# loga somente após esta confirmação
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True

# redirecionar após link de confirmação enviado
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/usuario/perfil/'

# Direciona para o form de cadastro
ACCOUNT_FORMS = {'usuario.forms.Cadastro_Usuario_Form':'signup'}
# Cadastro de usuário direcionado para Cadastrar_Usuário_Form
ACCOUNT_SIGNUP_FORM_CLASS = 'usuario.forms.Cadastro_Usuario_Form'


# Other settings
# ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
# ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
# SOCIALACCOUNT_AUTO_SIGNUP = False


LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = 'usuario:dashboard'
LOGOUT_URL = 'logout'
LOGOUT_REDIRECT_URL = '/'

# django-crispy-forms
CRISPY_TEMPLATE_PACK = "bootstrap4"


SOCIALACCOUNT_QUERY_EMAIL = True




